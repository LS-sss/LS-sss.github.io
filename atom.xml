<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lazy&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-06T15:26:04.927Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lazy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>oneone</title>
    <link href="http://yoursite.com/2020/05/06/oneone/"/>
    <id>http://yoursite.com/2020/05/06/oneone/</id>
    <published>2020-05-06T15:26:04.000Z</published>
    <updated>2020-05-06T15:26:04.927Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>py-py-py wp</title>
    <link href="http://yoursite.com/2020/05/06/py-py-py-wp/"/>
    <id>http://yoursite.com/2020/05/06/py-py-py-wp/</id>
    <published>2020-05-06T09:18:01.000Z</published>
    <updated>2020-05-06T09:45:37.222Z</updated>
    
    <content type="html"><![CDATA[<p>题目给的是一个pyc文件</p><p>按照正常的思路，我们可以用uncompyle6反编译出py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 1.pyc &gt; 11.py</span><br></pre></td></tr></table></figure><p><img src="/2020/05/06/py-py-py-wp/1.png" alt="1-1"></p><p>从代码中可以看出flag经过加密以后是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9474yeUMWODKruX7OFzD9oekO28+EqYCZHrUjWNm92NSU+eYXOPsRPEFrNMs7J+4qautoqOrvq28pLU&#x3D;</span><br></pre></td></tr></table></figure><p>用给的函数解密一下得到（注意：这个是python2）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The challenge is Steganography</span><br></pre></td></tr></table></figure><p>很显然这个不是flag，但是这个输出提示我们这个是pyc隐写要用到stegosaurus工具</p><p>那么就用一下stegosaurus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m stegosaurus __pycache__&#x2F;1.pyc -x</span><br></pre></td></tr></table></figure><p>这个命令是提取payload</p><p>然后就提取出payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Extracted payload: Flag&#123;HiD3_Pal0ad_1n_Python&#125;</span><br></pre></td></tr></table></figure><p>flag就看到了</p><p><strong><u>Flag{HiD3_Pal0ad_1n_Python}</u></strong></p><p><u><em>这题是要考点应该是pyc隐写</em></u></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目给的是一个pyc文件&lt;/p&gt;
&lt;p&gt;按照正常的思路，我们可以用uncompyle6反编译出py&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>misc训练计划-easy</title>
    <link href="http://yoursite.com/2020/05/06/misc-easy/"/>
    <id>http://yoursite.com/2020/05/06/misc-easy/</id>
    <published>2020-05-06T07:10:30.000Z</published>
    <updated>2020-05-06T10:12:35.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easy-学习（一）"><a href="#easy-学习（一）" class="headerlink" title="easy-学习（一）"></a>easy-学习（一）</h2><h3 id="1、base编码：base64，base32，base16"><a href="#1、base编码：base64，base32，base16" class="headerlink" title="1、base编码：base64，base32，base16"></a>1、base编码：base64，base32，base16</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">'ZmxhZ3s2NF9IZWxsb++8jFdvcmxkfQ=='</span></span><br><span class="line">flag=base64.b64decode(s).decode()</span><br><span class="line">print(flag)</span><br><span class="line">print(<span class="string">"=========================="</span>)</span><br><span class="line">s=<span class="string">'MZWGCZ33GMZF6SDFNRWG7354RRLW64TMMR6Q===='</span></span><br><span class="line">flag=base64.b32decode(s).decode()</span><br><span class="line">print(flag)</span><br><span class="line">print(<span class="string">"=========================="</span>)</span><br><span class="line">s=<span class="string">'666C61677B31365F48656C6C6FEFBC8C576F726C647D'</span></span><br><span class="line">flag=base64.b16decode(s).decode()</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;64_Hello，World&#125;</span></span><br><span class="line"><span class="comment">#==========================</span></span><br><span class="line"><span class="comment">#flag&#123;32_Hello，World&#125;</span></span><br><span class="line"><span class="comment">#==========================</span></span><br><span class="line"><span class="comment">#flag&#123;16_Hello，World&#125;</span></span><br></pre></td></tr></table></figure><p>也可以<a href="https://www.qqxiuzi.cn/bianma/base.php?type=16" target="_blank" rel="noopener">在线解密</a></p><p>base64还可以解码成图片：<a href="http://www.vgot.net/test/image2base64.php?" target="_blank" rel="noopener">在线解码网站</a></p><hr><h3 id="2、HTML-实体编码"><a href="#2、HTML-实体编码" class="headerlink" title="2、HTML 实体编码"></a>2、HTML 实体编码</h3><p>类似 <strong><u>&amp;#00</u></strong></p><p><a href="https://www.cnblogs.com/xsd1/p/11927556.html" target="_blank" rel="noopener">https://www.cnblogs.com/xsd1/p/11927556.html</a></p><hr><h3 id="3、morse编码"><a href="#3、morse编码" class="headerlink" title="3、morse编码"></a>3、morse编码</h3><p>类似<strong><u>-.-.-.-.-.-.-.-.-.</u></strong></p><p>可以用CTFcrackTool.jar解密</p><hr><p>4、键盘密码</p><p>这个是利用键盘的特性制作的密码，常见的加密方法有<strong>坐标法</strong>和<strong>顺序法</strong></p><p><strong>1、坐标法：</strong>1 QWE RTY UIOP 2 ASD FGH JKL 3 ZXC VBN M 密文：2251914161  ；22=S，51=T，91=O，41=R，61=Y</p><p><strong>2、顺序法：</strong>Q W E R T Y U I O P   1 2 3 4 5 6 7 8 9 10</p><p>A S D F G H J K L  11 12 13 14 15 16 17 18 19</p><p>Z X C V B N M        20 21 22 23 24 25 26 </p><p>密文：12 5 9 4 7 ；明文：story</p><p><strong>3、Qwerty</strong>：用键盘的顺序来表示abc-z</p><p>例如:Q=a,W=b</p><p>这个可以利用python构造字典，一一对应求解</p><hr><h3 id="5、二维码"><a href="#5、二维码" class="headerlink" title="5、二维码"></a>5、二维码</h3><p>二维码的基础知识：<a href="https://ls-sss.github.io/2020/05/06/QR-code/" target="_blank" rel="noopener">https://ls-sss.github.io/2020/05/06/QR-code/</a></p><p>经验（因为题目做的还不多，所以套路了解的还比较少）：补全定位图案，黑白取反，<a href="https://ls-sss.github.io/2020/05/06/2020-36D-misc-ez-qrcode/" target="_blank" rel="noopener">根据一半二维码的数据码手动解码</a></p><hr><h3 id="6、pyc反编译"><a href="#6、pyc反编译" class="headerlink" title="6、pyc反编译"></a>6、pyc反编译</h3><p>1、反汇编</p><p>可以使用python中的uncompyle6</p><p>安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip2 install uncompyle6</span><br></pre></td></tr></table></figure><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 1.pyc &gt; 11.py</span><br></pre></td></tr></table></figure><p>2、pyc隐写</p><p>有一种题目是pyc隐写需要用到<strong>Stegosaurus</strong>工具</p><p>python3.7没试成功，python3.6可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m stegosaurus example.py -r</span><br></pre></td></tr></table></figure><p>可以查看在不改变源文件（Carrier）大小的情况下，我们的Payload能携带多少字节的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m stegosaurus example.py -s --payload &quot;rootpwd: 5+3g05aW&quot;</span><br></pre></td></tr></table></figure><p>插入payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m stegosaurus** __pycache__**&#x2F;example.cpython-36-stegosaurus.pyc -x</span><br></pre></td></tr></table></figure><p>可以取出payload</p><p>有一题好像是<a href="https://ls-sss.github.io/2020/05/06/py-py-py-wp/" target="_blank" rel="noopener">py-py-py</a></p><hr><h3 id="7、LBS（最低有效位）隐写"><a href="#7、LBS（最低有效位）隐写" class="headerlink" title="7、LBS（最低有效位）隐写"></a>7、LBS（最低有效位）隐写</h3><p>一般存在于无损压缩</p><p><strong>1、图片</strong></p><p>一般存在于BMP文件里，可以使用stegsolve工具查看</p><p><strong>2、音频</strong></p><p>一般存在于wav格式里</p><p>可以使用ruby脚本解</p><hr><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a><strong>参考：</strong></h3><p><a href="https://www.cnblogs.com/xsd1/p/11927556.html" target="_blank" rel="noopener">https://www.cnblogs.com/xsd1/p/11927556.html</a>    #html实体编码</p><p><a href="https://blog.csdn.net/weixin_42109012/article/details/97532738" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42109012/article/details/97532738</a>  #键盘密码</p><p><a href="https://blog.csdn.net/dyw_666666/article/details/89973048" target="_blank" rel="noopener">https://blog.csdn.net/dyw_666666/article/details/89973048</a>      #键盘密码</p><p><a href="https://www.freebuf.com/sectool/129357.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/129357.html</a>   #Stegosaurus</p><p><a href="https://blog.csdn.net/qq_33438733/article/details/79324763" target="_blank" rel="noopener">https://blog.csdn.net/qq_33438733/article/details/79324763</a>  #LBS隐写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easy-学习（一）&quot;&gt;&lt;a href=&quot;#easy-学习（一）&quot; class=&quot;headerlink&quot; title=&quot;easy-学习（一）&quot;&gt;&lt;/a&gt;easy-学习（一）&lt;/h2&gt;&lt;h3 id=&quot;1、base编码：base64，base32，base16&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020_36D_misc_ez_qrcode</title>
    <link href="http://yoursite.com/2020/05/06/2020-36D-misc-ez-qrcode/"/>
    <id>http://yoursite.com/2020/05/06/2020-36D-misc-ez-qrcode/</id>
    <published>2020-05-06T05:11:15.000Z</published>
    <updated>2020-05-06T06:04:16.308Z</updated>
    
    <content type="html"><![CDATA[<p>给了一个gif，里面有半个二维码</p><p><img src="/2020/05/06/2020-36D-misc-ez-qrcode/gif.gif" alt="1-1"></p><p>在<a href="https://yous.be/2014/12/07/seccon-ctf-2014-qr-easy-write-up/" target="_blank" rel="noopener">SECCON CTF 2014</a>里面有一道类似的题目，那题的wp：<a href="https://yous.be/2014/12/07/seccon-ctf-2014-qr-easy-write-up/" target="_blank" rel="noopener">https://yous.be/2014/12/07/seccon-ctf-2014-qr-easy-write-up/</a></p><p>首先拿到这个gif直接扫码是扫不出来的，虽然它只有一半，但是这里面已经包含了二维码里的所有的数据码，也就是说基本所有的信息都有了。</p><p>那么要怎么才能得到信息，这就需要手动解码数据。二维码的一些编码基础知识可以参考：</p><p><a href="https://ls-sss.github.io/2020/05/06/QR-code/" target="_blank" rel="noopener">https://ls-sss.github.io/2020/05/06/QR-code/</a></p><p><a href="https://www.thonky.com/qr-code-tutorial/data-analysis" target="_blank" rel="noopener">https://www.thonky.com/qr-code-tutorial/data-analysis</a></p><p>1、首先手工补全二维码,可以使用这个<a href="https://merricx.github.io/qrazybox/" target="_blank" rel="noopener">QRazyBox</a>工具</p><p><img src="/2020/05/06/2020-36D-misc-ez-qrcode/sss.png" alt="1-2"></p><p>2、然后找到该二维码的格式信息</p><p><img src="/2020/05/06/2020-36D-misc-ez-qrcode/1.png" alt="1-3"></p><p>对应的是11100111是格式码的后8位</p><p>查表得：ECC是H，掩码模式是2（（列）mod 3 == 0）</p><p>3、根据数据区域和位顺图把D1-D26得数据码写出来</p><p><img src="/2020/05/06/2020-36D-misc-ez-qrcode/2.png" alt="1-4"></p><p><img src="/2020/05/06/2020-36D-misc-ez-qrcode/sss2.png" alt="1-5"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">D1:00010100</span><br><span class="line">D2:00110011</span><br><span class="line">D3:00110011</span><br><span class="line">D4:11000110 </span><br><span class="line">D5:00010110</span><br><span class="line">D6:11011101</span><br><span class="line">D7:00011111</span><br><span class="line">D8:00010011</span><br><span class="line">D9:00100001</span><br><span class="line">D10:00110110</span><br><span class="line">D11:00010110</span><br><span class="line">D12:11100110</span><br><span class="line">D13:10110011</span><br><span class="line">D14:10100010</span><br><span class="line">D15:00010001</span><br><span class="line">D16:01110110</span><br><span class="line">D17:01010111</span><br><span class="line">D18:01000100</span><br><span class="line">D19:00101100</span><br><span class="line">D20:01011110</span><br><span class="line">D21:00000010</span><br><span class="line">D22:01100110</span><br><span class="line">D23:01010111</span><br><span class="line">D24:11010000</span><br><span class="line">D25:11101101</span><br><span class="line">D26:01000100</span><br></pre></td></tr></table></figure><p>因为有掩码模式，所以根据掩码模式写出未掩盖得数据码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">D1:01000001</span><br><span class="line">D2:01100110</span><br><span class="line">D3:01100110 </span><br><span class="line">D4:11000110 </span><br><span class="line">D5:00010110</span><br><span class="line">D6:01110111</span><br><span class="line">D7:10110101</span><br><span class="line">D8:01000110</span><br><span class="line">D9:01110100</span><br><span class="line">D10:00110110</span><br><span class="line">D11:00010110</span><br><span class="line">D12:11100110</span><br><span class="line">D13:11100110</span><br><span class="line">D14:11110111</span><br><span class="line">D15:01000100</span><br><span class="line">D16:01110110</span><br><span class="line">D17:01010111</span><br><span class="line">D18:01000100</span><br><span class="line">D19:10000110</span><br><span class="line">D20:11110111</span><br><span class="line">D21:01010111</span><br><span class="line">D22:00110110</span><br><span class="line">D23:01010111</span><br><span class="line">D24:11010000</span><br><span class="line">D25:11101100</span><br><span class="line">D26:00010001</span><br></pre></td></tr></table></figure><p>4、接下来就可以解码数据了</p><p>根据<a href="https://ls-sss.github.io/2020/05/06/QR-code/" target="_blank" rel="noopener">https://ls-sss.github.io/2020/05/06/QR-code/</a></p><p><img src="/2020/05/06/2020-36D-misc-ez-qrcode/7.png" alt="1-6"></p><p><img src="/2020/05/06/2020-36D-misc-ez-qrcode/10.png" alt="1-7"></p><p>然后写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">'01000001'</span> \</span><br><span class="line">  <span class="string">'01100110'</span> \</span><br><span class="line">  <span class="string">'01100110'</span> \</span><br><span class="line">  <span class="string">'11000110'</span> \</span><br><span class="line">  <span class="string">'00010110'</span> \</span><br><span class="line">  <span class="string">'01110111'</span> \</span><br><span class="line">  <span class="string">'10110101'</span> \</span><br><span class="line">  <span class="string">'01000110'</span> \</span><br><span class="line">  <span class="string">'01110100'</span> \</span><br><span class="line">  <span class="string">'00110110'</span> \</span><br><span class="line">  <span class="string">'00010110'</span> \</span><br><span class="line">  <span class="string">'11100110'</span> \</span><br><span class="line">  <span class="string">'11100110'</span> \</span><br><span class="line">  <span class="string">'11110111'</span> \</span><br><span class="line">  <span class="string">'01000100'</span> \</span><br><span class="line">  <span class="string">'01110110'</span> \</span><br><span class="line">  <span class="string">'01010111'</span> \</span><br><span class="line">  <span class="string">'01000100'</span> \</span><br><span class="line">  <span class="string">'10000110'</span> \</span><br><span class="line">  <span class="string">'11110111'</span> \</span><br><span class="line">  <span class="string">'01010111'</span> \</span><br><span class="line">  <span class="string">'00110110'</span> \</span><br><span class="line">  <span class="string">'01010111'</span> \</span><br><span class="line">  <span class="string">'11010000'</span> \</span><br><span class="line">  <span class="string">'11101100'</span> \</span><br><span class="line">  <span class="string">'00010001'</span></span><br><span class="line">data= <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    mod = s[i:i + <span class="number">4</span>]  <span class="comment"># 取模式指示器</span></span><br><span class="line">    i += <span class="number">4</span></span><br><span class="line">    <span class="comment">#print(mod)</span></span><br><span class="line">    <span class="keyword">if</span> mod == <span class="string">'0001'</span>:  <span class="comment">#数值模式</span></span><br><span class="line">        num = int(s[i:i + <span class="number">10</span>], <span class="number">2</span>)</span><br><span class="line">        i += <span class="number">10</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            num -= <span class="number">3</span></span><br><span class="line">            ss = int(s[i:i + <span class="number">10</span>], <span class="number">2</span>)</span><br><span class="line">            print(ss, end=<span class="string">''</span>)</span><br><span class="line">            i += <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> mod == <span class="string">'0010'</span>:</span><br><span class="line">        num = int(s[i:i + <span class="number">9</span>], <span class="number">2</span>)    <span class="comment">#字母数字模式</span></span><br><span class="line">        i += <span class="number">9</span></span><br><span class="line">        <span class="comment">#print(num)</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            num -= <span class="number">2</span></span><br><span class="line">            zm = int(s[i:i + <span class="number">11</span>], <span class="number">2</span>)</span><br><span class="line">            <span class="comment">#print(zm)</span></span><br><span class="line">            print(data[zm // <span class="number">45</span>], end=<span class="string">''</span>)</span><br><span class="line">            print(data[zm % <span class="number">45</span>], end=<span class="string">''</span>)</span><br><span class="line">            i += <span class="number">11</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> mod == <span class="string">'0100'</span>:       <span class="comment">#字节模式</span></span><br><span class="line">        num = int(s[i:i + <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">        i += <span class="number">8</span></span><br><span class="line">        <span class="comment">#print(num)</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            zj = int(s[i:i + <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">            i += <span class="number">8</span></span><br><span class="line">            print(chr(zj), end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">elif</span> mod == <span class="string">'1000'</span>:   <span class="comment">#汉字模式</span></span><br><span class="line">        num = int(s[i:i + <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">        i += <span class="number">8</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            num -= <span class="number">1</span></span><br><span class="line">            hz = hex(int(s[i:i + <span class="number">13</span>]), <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> hz &gt;= <span class="number">0x1740</span>:</span><br><span class="line">                result = (<span class="number">0xC140</span> + hz // <span class="number">0xC0</span> * <span class="number">0x100</span> + hz % <span class="number">0xC0</span>)</span><br><span class="line">                print(chr(result).encode(encoding=<span class="string">"UTF_8"</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = (<span class="number">0x8140</span> + hz // <span class="number">0xC0</span> * <span class="number">0x100</span> + hz % <span class="number">0xC0</span>)</span><br><span class="line">                print(chr(result).encode(encoding=<span class="string">"UTF_8"</span>))</span><br><span class="line">            i += <span class="number">13</span></span><br><span class="line">    <span class="keyword">elif</span> mod==<span class="string">'0000'</span>:   <span class="comment">#结束符</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>运行就得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;TgCannotGetHouse&#125;</span><br></pre></td></tr></table></figure><p><em>这题主要考的就是二维码的一些知识</em></p><hr><p>参考：</p><p><a href="https://wp.ctf.show/d/114-36d-ez-qrcode-42" target="_blank" rel="noopener">https://wp.ctf.show/d/114-36d-ez-qrcode-42</a></p><p><a href="https://yous.be/2014/12/07/seccon-ctf-2014-qr-easy-write-up/" target="_blank" rel="noopener">https://yous.be/2014/12/07/seccon-ctf-2014-qr-easy-write-up/</a></p><p><a href="https://www.thonky.com/qr-code-tutorial/mask-patterns" target="_blank" rel="noopener">https://www.thonky.com/qr-code-tutorial/mask-patterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给了一个gif，里面有半个二维码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/05/06/2020-36D-misc-ez-qrcode/gif.gif&quot; alt=&quot;1-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://yous.be/2014/12/07/sec
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>misc中的二维码知识</title>
    <link href="http://yoursite.com/2020/05/06/QR-code/"/>
    <id>http://yoursite.com/2020/05/06/QR-code/</id>
    <published>2020-05-06T03:26:28.000Z</published>
    <updated>2020-05-06T08:02:54.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二维码的学习（一）"><a href="#二维码的学习（一）" class="headerlink" title="二维码的学习（一）"></a>二维码的学习（一）</h2><h3 id="二维码的基本结构"><a href="#二维码的基本结构" class="headerlink" title="二维码的基本结构"></a>二维码的基本结构</h3><p><img src="/2020/05/06/QR-code/2.png" alt="1-1"></p><p>其中的格式信息一共有15位，二维码上只显示了后八位</p><p>我们可以更具格式信息<a href="https://www.thonky.com/qr-code-tutorial/format-version-tables#about-format-information-strings" target="_blank" rel="noopener">查表</a>知道二维码的ECC级别，掩码模式，版本信息</p><p><img src="/2020/05/06/QR-code/4.png" alt="1-2"></p><p><img src="/2020/05/06/QR-code/5.png" alt="1-3"></p><p>ECC级别是容错率</p><p><img src="/2020/05/06/QR-code/7.png" alt="1-4"></p><p>掩码模式改变有些位的颜色，使二维码更容易被二维码扫描仪读取，只适用于数据码和纠错码</p><p><img src="/2020/05/06/QR-code/6.png" alt="1-5"></p><p>如果二维码中某个位的坐标满足对应掩码模式的公式，就要改变颜色，0变1，1变0（黑色1，白色0）</p><h3 id="解码数据"><a href="#解码数据" class="headerlink" title="解码数据"></a>解码数据</h3><p>数据的结构</p><p><img src="/2020/05/06/QR-code/8.png" alt="1-6"></p><p><strong>1、编码模式：</strong></p><p>​      <em>数值模式</em>：使用于0-9的十进制数字，三个三个一起编码<strong>10位</strong>（如678=1010100110）</p><p>​     <em>字母数字模式</em>：适用于0-9数字、大写（不包括小写）字母、符号$，％，<em>，+，-，。，/，：以及空格。两 个一起编码，*</em>11位**。第一个字母对应的数值乘与45加第二个字母对应的数值（如SE=10011111010）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-.&#x2F;:&#39;</span><br></pre></td></tr></table></figure><p>各个字母对应的数值就是各个字母在上面字符串里的位置从0开始（如：“0”=0，“S”=28）</p><p>​      <em>字节模式：</em>默认情况下适用于ISO-8859-1字符集中的字符。每个字母或者符号根据其在ISO-8859-1的位置编码成8位的二进制（如f=01100110）</p><p>​        <em>汉字模式（一般在ctf里用不到）</em>：适用 于Shift JIS字符集中<strong>的双字节</strong>字符。首先把汉字转换成双字节，然后有两种编码双字节汉字字符的方法。(一般13位）一种方法是针对字节在0x8140到0x9FFC范围内的字符。另一种方法是针对字节在0xE040到0xEBBF范围内的字符。</p><p>对字节在0x8140到0x9FFC范围内的字符:</p><p>首先减去0x8140，</p><p>然后分成最高有效字节和最低有效字节（如0x0897的最高有效字节为0x08，最低有效字节为0x97），</p><p>然后将最高有效字节乘与0xC0加上最低有效字节（如（0x08*0xC0)+0x97=0x697=0011010010111)</p><p>对字节在0xE040到0xEBBF范围内的字符：</p><p>首先减去0xE040</p><p>然后分成最高有效字节和最低有效字节</p><p>然后将最高有效字节乘与0xC0加上最低有效字节</p><p>​          <em>ECI模式</em>：指定字符集</p><p><img src="/2020/05/06/QR-code/9.png" alt="1-7"></p><p>2、字符指针指示器</p><p>字符计数指示器的长度取决于将要使用的编码模式和QR码版本</p><p>表示的是字符的长度比如说要编码的字符长度位11位，11转换成二进制就是1011，要是版本为1-9且编码模式为数值模式那么字符计数指示器=0000001011</p><p><img src="/2020/05/06/QR-code/10.png" alt="1-8"></p><p>3、编码数据</p><p>?     根据指定的编码模式编码数据</p><p>4、终止符 <strong>‘0000’</strong></p><p>注：1、要添加0使最终编码的二进制为8的倍数2、如果字符串仍然不够长，无法填满最大容量，请在字符串末尾添加以下字节，重复进行直到字符串达到最大长度为止：<br><strong>11101100 00010001</strong></p><hr><p>参考：</p><p><a href="https://www.thonky.com/qr-code-tutorial/mask-patterns" target="_blank" rel="noopener">https://www.thonky.com/qr-code-tutorial/mask-patterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二维码的学习（一）&quot;&gt;&lt;a href=&quot;#二维码的学习（一）&quot; class=&quot;headerlink&quot; title=&quot;二维码的学习（一）&quot;&gt;&lt;/a&gt;二维码的学习（一）&lt;/h2&gt;&lt;h3 id=&quot;二维码的基本结构&quot;&gt;&lt;a href=&quot;#二维码的基本结构&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CRC校验</title>
    <link href="http://yoursite.com/2020/04/30/CRC/"/>
    <id>http://yoursite.com/2020/04/30/CRC/</id>
    <published>2020-04-30T07:10:04.000Z</published>
    <updated>2020-04-30T07:27:56.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CRC校验"><a href="#CRC校验" class="headerlink" title="CRC校验"></a>CRC校验</h2><h3 id="struct库的学习："><a href="#struct库的学习：" class="headerlink" title="struct库的学习："></a>struct库的学习：</h3><p>struct.pack()</p><p>struct.unpack()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment"># native byteorder</span></span><br><span class="line">buffer = struct.pack(<span class="string">"ihb"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(buffer)</span><br><span class="line">print(struct.unpack(<span class="string">"ihb"</span>, buffer))</span><br><span class="line"></span><br><span class="line"><span class="comment"># data from a sequence, network byteorder</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">buffer = struct.pack(<span class="string">"!ihb"</span>, *data) <span class="comment">#pack将数据封装成字符串   ！= &gt; = 大端对齐</span></span><br><span class="line">print(buffer)</span><br><span class="line"><span class="comment">#repr(buffer) 返回string类型</span></span><br><span class="line">print(struct.unpack(<span class="string">"!ihb"</span>, buffer))  <span class="comment">#unpack解析字符串，以元组tuple类型返回</span></span><br></pre></td></tr></table></figure><p><img src="/2020/04/30/CRC/1.png" alt="1-1"></p><h3 id="python-bytearray-函数"><a href="#python-bytearray-函数" class="headerlink" title="python  bytearray()函数"></a>python  bytearray()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = bytearray(<span class="number">5</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>output：</p><p><img src="/2020/04/30/CRC/2.png" alt="1-2"></p><h3 id="CRC爆破宽高："><a href="#CRC爆破宽高：" class="headerlink" title="CRC爆破宽高："></a>CRC爆破宽高：</h3><p>首先要了解png文件头的组成：</p><p>- （固定）八个字节89 50 4E 47 0D 0A 1A 0A为png的文件头</p><p>- （固定）四个字节00 00 00 0D（即为十进制的13）代表数据块的长度为13 </p><p>- （固定）四个字节49 48 44 52（即为ASCII码的IHDR）是文件头数据块的标示（IDCH） </p><p>- （可变）13位数据块（IHDR) - 前四个字节代表该图片的宽 - 后四个字节代表该图片的高 </p><p>- 后五个字节依次为： Bit depth、ColorType、Compression method、Filter method、Interlace method </p><p>- （可变）剩余四字节为该png的CRC检验码，由从IDCH到IHDR的十七位字节进行crc计算得到。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">crc32key = <span class="number">0xC2C143B3</span>    <span class="comment">#补上0x，winhex下copy hex value。</span></span><br><span class="line">data = bytearray(<span class="string">b'\x49\x48\x44\x52\x00\x00\x03\xE8\x00\x00\x03\x84\x08\x02\x00\x00\x00'</span>)   <span class="comment">#winhex下copy grep hex。</span></span><br><span class="line">n = <span class="number">4095</span> <span class="comment">#理论上0xffffffff,但考虑到屏幕实际/cpu，0x0fff就差不多了</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> range(n):<span class="comment">#高和宽一起爆破</span></span><br><span class="line">    width = bytearray(struct.pack(<span class="string">'&gt;i'</span>, w))<span class="comment">#q为8字节，i为4字节，h为2字节</span></span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> range(n):</span><br><span class="line">        height = bytearray(struct.pack(<span class="string">'&gt;i'</span>, h))  <span class="comment"># w=1时 height=bytearray(b'\x00\x00\x00\x01')</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">            data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">        crc32result = zlib.crc32(data)   <span class="comment">#zlib.crc32(data)计算data的CRC,结果为32位的整数</span></span><br><span class="line">        <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">            print(width,height)</span><br></pre></td></tr></table></figure><p>这个是根据CRC爆破出png宽高的大佬的代码</p><hr><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><blockquote><p><strong><a href="https://blog.csdn.net/w83761456/article/details/21171085/" target="_blank" rel="noopener">https://blog.csdn.net/w83761456/article/details/21171085/</a></strong></p><p><a href="https://blog.csdn.net/weiwangchao_/article/details/80395941" target="_blank" rel="noopener">https://blog.csdn.net/weiwangchao_/article/details/80395941</a></p><p><a href="https://www.jianshu.com/p/0b5d14657d2e" target="_blank" rel="noopener">https://www.jianshu.com/p/0b5d14657d2e</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CRC校验&quot;&gt;&lt;a href=&quot;#CRC校验&quot; class=&quot;headerlink&quot; title=&quot;CRC校验&quot;&gt;&lt;/a&gt;CRC校验&lt;/h2&gt;&lt;h3 id=&quot;struct库的学习：&quot;&gt;&lt;a href=&quot;#struct库的学习：&quot; class=&quot;headerlink
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>攻防世界——misc——进阶</title>
    <link href="http://yoursite.com/2020/04/30/misc-up/"/>
    <id>http://yoursite.com/2020/04/30/misc-up/</id>
    <published>2020-04-30T06:19:36.000Z</published>
    <updated>2020-04-30T07:02:45.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻防世界——misc——进阶"><a href="#攻防世界——misc——进阶" class="headerlink" title="攻防世界——misc——进阶"></a>攻防世界——misc——进阶</h2><h3 id="Dift"><a href="#Dift" class="headerlink" title="Dift"></a>Dift</h3><p><img src="/2020/04/30/misc-up/1.png" alt="1-1"></p><p>下载得到一个png图片</p><p><img src="/2020/04/30/misc-up/2.png" alt="1-2"></p><p>拿到这个图片根据套路：查看详细信息-&gt;WinHex然后拉到最后发现结尾不是png的结尾字节，然后就猜是不是png后面还有东西。</p><p>那么就在kali里用binwalk命令分离隐藏文件（后来发现foremost分离更快）</p><p><code>foremost 1.png</code></p><p>分离出来一个rar，但是解压需要密码（这时候啥提示也没有，也不是伪加密，看了大佬的wp后知道解压的密码在图片里，高度被修改了隐藏了密码）</p><p>接下来用CRC校验爆破宽高</p><p><img src="/2020/04/30/misc-up/3.png" alt="1-3"></p><p><img src="/2020/04/30/misc-up/4.png" alt="1-4"></p><p>发现高出了点问题，修改一下，另存为</p><p><img src="/2020/04/30/misc-up/5.png" alt="1-5"></p><p>然后就看到了压缩包密码，解压得到一个流量包（这时候在没有任何提示的情况下，我们一般将http全部导出来看看。一个个看过来以后发现了一些好像加了密的字符）</p><p><img src="/2020/04/30/misc-up/6.png" alt="1-6"></p><p>这些字符由数字、小写单词、大写单词组成，猜测是base64加密，解密一下，就看到了flag</p><p><strong>flag{Oz_4nd_Hir0_lov3_For3ver}</strong></p><p><strong><u>这题主要考的是：CRC校验、流量分析、分离png中的隐藏文件、编码解密</u></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;攻防世界——misc——进阶&quot;&gt;&lt;a href=&quot;#攻防世界——misc——进阶&quot; class=&quot;headerlink&quot; title=&quot;攻防世界——misc——进阶&quot;&gt;&lt;/a&gt;攻防世界——misc——进阶&lt;/h2&gt;&lt;h3 id=&quot;Dift&quot;&gt;&lt;a href=&quot;#D
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>misc_流量分析</title>
    <link href="http://yoursite.com/2020/04/30/misc-wireshark/"/>
    <id>http://yoursite.com/2020/04/30/misc-wireshark/</id>
    <published>2020-04-30T03:18:53.000Z</published>
    <updated>2020-04-30T07:36:08.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻防世界——misc"><a href="#攻防世界——misc" class="headerlink" title="攻防世界——misc"></a>攻防世界——misc</h2><h3 id="wireshark-1"><a href="#wireshark-1" class="headerlink" title="wireshark-1"></a>wireshark-1</h3><p><img src="/2020/04/30/misc-wireshark/1.png" alt="1-1"></p><p>根据题目<strong>登入网站的一段流量包</strong>应该是<strong>http协议</strong>，提交的表单应该是<strong>post方式</strong></p><p><img src="/2020/04/30/misc-wireshark/2.png" alt="1-2"></p><p>用wireshark打开pcap文件，找到Protocol中的http和info中的post的包</p><p>右键-&gt;追踪流-&gt;http</p><p><img src="/2020/04/30/misc-wireshark/3.png" alt="1-3"></p><p>然后你就可以看到flag</p><p><strong>ffb7567a1d4f4abdffdb54e022f8facd</strong></p><hr><h3 id="心仪的公司"><a href="#心仪的公司" class="headerlink" title="心仪的公司"></a>心仪的公司</h3><p>看了大佬的wp才会的</p><p>题目的提示是：对<strong>网站上传webshell</strong>获取了公司的<strong>图片</strong></p><p>根据提示进行http筛选，看到了两个内网地址<strong>192.168.1.111</strong>和<strong>192.168.1.108</strong>.查看<strong>192.168.1.111</strong>发现了XFF字段并且有大量的访问外网，就可以猜测<strong>192.168.1.108</strong>进行了反向代理攻击，那么接下来筛选192.168.1.108的数据包</p><p><img src="/2020/04/30/misc-wireshark/4.png" alt="2-1"></p><p>题目中提示有图片，然后也在数据流中发现了图片，点开来一看，在最后发现了flag</p><p><img src="/2020/04/30/misc-wireshark/5.png" alt="2-2"></p><p><strong>fl4g:{ftop_Is_Waiting_4_y}</strong></p><p><strong><em>大佬的wp：<a href="https://www.freebuf.com/news/150129.html" target="_blank" rel="noopener">https://www.freebuf.com/news/150129.html</a></em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;攻防世界——misc&quot;&gt;&lt;a href=&quot;#攻防世界——misc&quot; class=&quot;headerlink&quot; title=&quot;攻防世界——misc&quot;&gt;&lt;/a&gt;攻防世界——misc&lt;/h2&gt;&lt;h3 id=&quot;wireshark-1&quot;&gt;&lt;a href=&quot;#wireshark-
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>misc_png</title>
    <link href="http://yoursite.com/2020/04/30/misc-png/"/>
    <id>http://yoursite.com/2020/04/30/misc-png/</id>
    <published>2020-04-30T02:18:50.000Z</published>
    <updated>2020-04-30T02:34:53.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="png头文件的结构简单介绍"><a href="#png头文件的结构简单介绍" class="headerlink" title="png头文件的结构简单介绍"></a>png头文件的结构简单介绍</h2><p><img src="/2020/04/30/misc-png/1.png" alt="1-1"></p><p>头字节:89 50 4E 47 0D 0A 1A 0A</p><p><img src="/2020/04/30/misc-png/2.png" alt="1-2"></p><p>这里是IHDR数据块</p><p>IHDR标识符：49 48 44 52</p><p>图片的高：00 00 01 72</p><p>图片的宽：00 00 01 72</p><p>CRC校验：C0 5F 6C A4</p><p><strong>CRC校验可以用来爆破图片的宽和高，有些ctf的题目是通过修改图片的宽和高来隐藏flag</strong></p><p><img src="/2020/04/30/misc-png/3.png" alt="1-3"></p><p>png结束字节</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;png头文件的结构简单介绍&quot;&gt;&lt;a href=&quot;#png头文件的结构简单介绍&quot; class=&quot;headerlink&quot; title=&quot;png头文件的结构简单介绍&quot;&gt;&lt;/a&gt;png头文件的结构简单介绍&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/04/30/misc
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>misc_压缩包</title>
    <link href="http://yoursite.com/2020/04/28/misc-rar-zip/"/>
    <id>http://yoursite.com/2020/04/28/misc-rar-zip/</id>
    <published>2020-04-28T12:40:08.000Z</published>
    <updated>2020-04-30T06:59:25.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="misc-2"><a href="#misc-2" class="headerlink" title="misc_2"></a>misc_2</h1><h2 id="压缩包的解密"><a href="#压缩包的解密" class="headerlink" title="压缩包的解密"></a>压缩包的解密</h2><h3 id="buuctf-misc-rar"><a href="#buuctf-misc-rar" class="headerlink" title="buuctf_misc_rar"></a>buuctf_misc_rar</h3><p><img src="/2020/04/28/misc-rar-zip/1.png" alt="1-1"></p><p><img src="/2020/04/28/misc-rar-zip/2.png" alt="1-2"></p><p>下载下来后得到一个加密的压缩包，根据题目提示四位纯数字密码，这时候想都不用想直接用aapr这个工具暴力破解密码。四位纯数字的密码爆破很快的。最后得到压缩包密码<strong>8795</strong></p><p><img src="/2020/04/28/misc-rar-zip/3.png" alt="1-3"></p><p>解压压缩包得到一个flag.txt文件，flag就在里面。</p><p><strong>flag{1773c5da790bd3caff38e3decd180eb7}</strong></p><p><strong><u>本题的考点：压缩包的解密中的暴力破解</u></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;misc-2&quot;&gt;&lt;a href=&quot;#misc-2&quot; class=&quot;headerlink&quot; title=&quot;misc_2&quot;&gt;&lt;/a&gt;misc_2&lt;/h1&gt;&lt;h2 id=&quot;压缩包的解密&quot;&gt;&lt;a href=&quot;#压缩包的解密&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo cannot display images properly with markdown</title>
    <link href="http://yoursite.com/2020/04/23/Hexo-cannot-display-images-properly-with-markdown/"/>
    <id>http://yoursite.com/2020/04/23/Hexo-cannot-display-images-properly-with-markdown/</id>
    <published>2020-04-23T02:16:47.000Z</published>
    <updated>2020-04-23T02:26:45.382Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight https"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://www.jianshu.com/p/3db6a61d3782</span></span><br></pre></td></tr></table></figure><p>直接看别人的简书</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight https&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>misc_1</title>
    <link href="http://yoursite.com/2020/04/22/misc-1/"/>
    <id>http://yoursite.com/2020/04/22/misc-1/</id>
    <published>2020-04-22T15:20:55.000Z</published>
    <updated>2020-04-24T14:17:35.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="misc的学习"><a href="#misc的学习" class="headerlink" title="misc的学习"></a>misc的学习</h1><h2 id="BUUCTF-Misc-基础题"><a href="#BUUCTF-Misc-基础题" class="headerlink" title="BUUCTF-Misc-基础题"></a>BUUCTF-Misc-基础题</h2><h3 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h3><p><img src="/2020/04/22/misc-1/biubiu.jpg" alt="1-1"></p><p>1、查看一下属性-详细信息（什么也没发现）</p><p>2、用WinHex打开，看看旁边的ASCII，可能flag就隐藏在里面。拉到最后</p><p><img src="/2020/04/22/misc-1/misc-1.png" alt="1-2"></p><p>然后就看到了flag。。。</p><p><strong><u>同样的题目：乌镇峰会种图</u></strong></p><hr><h3 id="LBS"><a href="#LBS" class="headerlink" title="LBS"></a>LBS</h3><p><img src="/2020/04/22/misc-1/flag11.png" alt="2-1"></p><p>1、根据题目提示是LBS隐写</p><p>2、直接用StegSolve打开-&gt;Analyse-&gt;Data Extract</p><p>一般是RGB最后三个字节，那就先试试</p><p><img src="/2020/04/22/misc-1/2-1.png" alt="2-2"></p><p>然后Preview看看里面有啥</p><p><img src="/2020/04/22/misc-1/2-2.png" alt="2-2"></p><p>看到了png头文件，有东西，有戏，然后把它导出来保存为png。导出来为一个二维码</p><p><img src="/2020/04/22/misc-1/flag.png" alt="2-3"></p><p>这时候不用想肯定去扫二维码，然后你就看到了flag</p><p><strong>cumtctf{1sb_i4_s0_Ea4y}</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;misc的学习&quot;&gt;&lt;a href=&quot;#misc的学习&quot; class=&quot;headerlink&quot; title=&quot;misc的学习&quot;&gt;&lt;/a&gt;misc的学习&lt;/h1&gt;&lt;h2 id=&quot;BUUCTF-Misc-基础题&quot;&gt;&lt;a href=&quot;#BUUCTF-Misc-基础题&quot; c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>about</title>
    <link href="http://yoursite.com/2020/03/24/about/"/>
    <id>http://yoursite.com/2020/03/24/about/</id>
    <published>2020-03-23T16:15:29.000Z</published>
    <updated>2020-03-23T16:21:16.794Z</updated>
    
    <content type="html"><![CDATA[<p>搭建了一个blog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;搭建了一个blog&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/23/hello-world/"/>
    <id>http://yoursite.com/2020/03/23/hello-world/</id>
    <published>2020-03-23T04:12:16.541Z</published>
    <updated>2020-03-23T04:12:16.541Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
